export const classes = [
    {
        title:'Practice of Computer Science',
        code:'CSC106',
        description:'A general introduction to the field of computer science, its basic areas and its connections to interdisciplinary topics: Computer science is a vast and expanding field, and the study of computer science extends beyond computing machines and programming. CSC 106 is a broad survey of the discipline, with a particular focus on interdisciplinary aspects and emerging topics in computer science practice.',
        units: 1.5,
        grade: 'A+',
        topics: [
            'History of computers and computational science',
            'Data management and representation',
            'Artificial intelligence',
            'Architecture, hardware and networks',
            'Information security',
            'Cryptography',
            'Human/computer interaction',
            'Computational hardness and incomputability',
            'Algorithms',
            'Programming Languages',
            'Problem abstraction and problem solving',
            'Software engineering',
            'Interdisciplinary applications',
            'Algorithms',
            'What is and what is not computable?',
            'Graphs',
            'Programming and Problem Solving Concepts',
            'Programming Basics',
            'Programming Languages',
            'Human Computer Interaction',
            'Databases',
            'Networks',
            'Hardware',
            'Security',
            'Social Computing',
            'Applications in Music and Arts',
            'Artificial Intelligence',
            'Data Mining',
            'Health Informatics',
            'Bioinformatics',
            'Computers in Society',
            'Information Visualization',
            'Geomatics',
            'Software Engineering',
        ]
    },
    {
        title:'Fundamentals of Programming: Engineering Applications',
        code:'CSC111',
        description:'CSC 111 is an introduction to computational problem solving and computer programming, with a particular emphasis on applications to engineering problems. This course teaches programming using the C language, which is needed by many engineering disciplines, but the programming skills taught in this course are language-agnostic and can be applied to other programming languages as well.',
        unit: 1.5,
        grade: 'A-',
        topics: [
            'The development lifecycle',
            'Development environments',
            'Control flow',
            'Iterative design and refinement',
            'Debugging techniques',
            'Algorithms',
            'Data representation and data structures (sequences, arrays and lists)',
            'The C development and build process',
            'Variables and types',
            'Loops, if-statements and functions',
            'Sequences and arrays',
            'Structure types',
            'File I/O',
            'Pointers and memory management',
            'Linked lists',
        ]
    },
    {
        title:'Fundamental Programming: II',
        code:'CSC115',
        description:'This course introduces two fundamental programming concepts: abstract data types and recursion; It examines and applies these concepts within the context of an object-oriented approach to programming; It introduces techniques for reasoning about the efficiency of algorithms and data structures; It studies foundational approaches to organizing data and computations.',
        units: 1.5,
        grade: 'B',
        topics: [
            'A review of programming in Java',
            'The design, definition and manipulation of simple data objects',
            'The implementation of lists, including both sequential (linked) and random access (array) variations',
            'The implementation of stacks, queues, binary trees, and hash tables; with applications',
            'An introduction to polymorphism: class hierarchies, interfaces, and generic types',
            'Problem decomposition using recursion and divide-and-conquer strategies',
            'Techniques for describing the time and space requirements of data structures and their operations',
            'The efficiency of common searching and sorting approaches',
        ]
    },
    {
        title:'World Wide Web and Mobile Applications',
        code:'CSC130',
        description:'An introduction for non-specialists to the Internet, the World-Wide-Web (WWW), and front-end application development. Students will learn how to create dynamic web applications by making numerous web technologies work together. Each lab, homework, and project in the course will consist of building a rich, interactive, dynamic web application, using basic computer science and programming principles.',
        units: 1.5,
        grade: 'A+',
        topics: [
            'Internet and the WWW',
            'W3C Standards and HTML5',
            'CSS',
            'Javascript',
            'Web Page Design Tools, Multimedia, Dynamic Web Content',
            'Web Application Development Tools and Technologies',
        ]
    },
    {
        title:'Algorithms and Data Structures: I',
        code:'CSC225',
        description:'The goal of this class is to illustrate this process and develop these skills starting with some traditional problems, algorithms and data structures. The performance of a program on small inputs (typical in introductory computer science courses) gives no indication of how an algorithm will perform on the large inputs often found in real applications. Paper and pencil techniques are presented for analysing algorithms for time and space requirements on large inputs without requiring the effort of implementation. Algorithms are compared with respect to their worst, average, and best case performances. The techniques learned in the course are applied to well-studied classical problems including searching, sorting, and some graph theory applications. The study of abstract data types is continued from CSC 115 but the focus changes from that of understanding the data types to being able to make knowledgeable choices as to the best data structures for a particular application.',
        units: 1.5,
        grade: 'B',
        topics: [
            'Algorithm design techniques',
            'Fundamental algorithm analysis',
            'Time and space complexity',
            'Asymptotic analysis',
            'Recursive analysis and recurrence relations',
            'Proof techniques',
            'Basic data structures: arrays, lists, stacks and queues',
            'General purpose sorting algorithms, such as Heap sort, Insertion sort, Merge sort, Quick sort, and Selection sort',
            'Special purpose sorting algorithms, such as lexicographical sorting and Radix sort',
            'Priority Queues (including Heaps)',
            'Binary Search Trees',
            'Balanced Search Trees',
            'Mathematical foundations',
            'Problem abstraction with graphs',
            'Data structures for graph representation',
            'Fundamental graph traversal algorithms and applications',
            'Connectivity and strong connectivity',
            'Topological sorting',
        ]
    },
    {
        title:'Algorithms and Data Structures: II',
        code:'CSC226',
        description:'This course is the continuation of Algorithms and Data Structures I (CSC 225). Students will learn a variety of important data structures, algorithms, and algorithm design techniques. Relevant mathematical concepts are an integral part of this course.',
        units: 1.5,
        grade: 'A-',
        topics: [
            'Advanced techniques for design, analysis, and implementation of algorithms and data structures',
            'Algorithmic design paradigms: greedy, divide-and-conquer, dynamic programming, randomization',
            'Advanced Analysis techniques: amortization and expected running time',
            'Advanced data structures: random hash families, disjoint sets',
            'Advanced graph algorithms: network flow, connectivity, minimum spanning trees, shortest paths',
            'Mathematical tools: graphs and digraphs, graph properties, planar graphs, networks',
            'String search',
            'Data compression',
        ]
    },
    {
        title:'Computer Architecture',
        code:'CSC230',
        description:'This course approaches the topics related to computer organization and architecture in two ways: the "what", and the "how". To answer the "what" question, the course presents the fundamental principles of computer organization and architecture. This leads to an introductory understanding of the design of processors, the structure and operation of memory and virtual memory, cache, storage, and pipelining, system integration, and peripherals. The course also provides an introduction to issues of system performance evaluation and the relationship of architecture to system software. Regarding the "how" question¬ù, the course provides an introduction to assembly language programming. This leads to a direct and practical understanding of the inner working stages of a processor in relation to the rest of the system, including memory and cache management, interrupt processing and pipelining. Execution of software via assembly language and high level languages is explained in terms of system software tools which include assemblers, compilers, linkers, and loaders.',
        units: 1.5,
        grade: 'A',
        topics: [
            'Explain the concepts of RISC and CISC computer architecture, emphasizing RISC.',
            'Explain the elements of an instruction cycle.',
            'Program in the C language, using C as a cross compiler from a higher level language to an assembly language.',
            'Summarize the instruction cycle.',
            'Write programs in assembly language using the AVR RISC architecture as a case study.',
            'Describe the function of compilers, linkers, loaders, and static and dynamic libraries',
            'Use the techniques of polling and interrupts to obtain input from peripheral devices',
            'Describe the characteristics of computer memory hierarchy systems, including performance issues of multiple memory levels',
            'Describe the concepts of cache and virtual memory',
            'Distinguish between memory mapping techniques',
            'Explain how instruction pipelining speeds up over program execution, including describing various pipeline hazards.',
            'Compare and contrast the various processors and architectures defined in the current literature',
        ]
    },

];
